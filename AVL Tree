// INSERTION OF ELEMENTS IN THE AVL TREE AND OUTPUT :
// 1) AVL TRAVERSAL
// 2) HEIGHT OF THE TREE
// 3) BALANCE FACTOR OF THE TREE

#include<bits/stdc++.h>
using namespace std;

struct node
{
    int data;
    struct node *left;
    struct node *right;
    int h;
};

struct node *MakeNode(int x)
{
    struct node *p;
    p = (struct node*)malloc(sizeof(struct node));
    p->data = x;
    p->left = NULL;
    p->right = NULL;
    return p;
}

void Inorder (struct node *T)
{
    if (T != NULL)
    {
        Inorder(T->left);
        cout<<T->data<<" ";
        Inorder(T->right);
    }
}

int Height(struct node *T)
{
    int hL,hR;
    if (T->left==NULL)
        hL=0;
    else
        hL = 1+T->left->h;
    if (T->right==NULL)
        hR=0;
    else
        hR = 1+T->right->h;

    return max(hL,hR);
}

int BalanceFac(struct node *T)
{
    int hL,hR;
    if (T->left==NULL)
        hL=0;
    else
        hL = 1+T->left->h;
    if (T->right==NULL)
        hR=0;
    else
        hR = 1+T->right->h;

    return (hL-hR);
}

struct node *RotateLeft(struct node *x)
{
    struct node *y,*w;
    y = x->right;
    w = y->left;
    y->left = x;
    x->right = w;
    return y;
};

struct node *RotateRight(struct node *x)
{
    struct node *y,*w;
    y = x->left;
    w = y->right;
    y->right = x;
    x->left = w;
    return y;
};

struct node *LL(struct node *x)
{
    struct node *y;
    y = RotateRight(x);
    return y;
};

struct node *RR(struct node *x)
{
    struct node *y;
    y = RotateLeft(x);
    return y;
};

struct node *LR(struct node *x)
{
    struct node *y,*z,*w;
    y = x->left;
    z = RotateLeft(y);
    x->left = z;
    w = RotateRight(x);
    return w;
};

struct node *RL(struct node *x)
{
    struct node *y,*z,*w;
    y = x->right;
    z = RotateRight(y);
    x->right = z;
    w = RotateLeft(x);
    return w;
};

struct node *AVLInsert(struct node *T,int x)
{
    if (T == NULL)
        T = MakeNode(x);
    else
    {
        if (x<T->data){
            T->left = AVLInsert(T->left,x);
            if (BalanceFac(T)==2){
                if (x<T->left->data)
                    T = LL(T);
                else
                    T = LR(T);
            }
    }
        else{
            T->right = AVLInsert(T->right,x);
            if (BalanceFac(T)== -2){
                if (x<T->right->data)
                    T = RR(T);
                else
                    T = RL(T);
            }
    }
    }
    T->h = Height(T);
    return T;

}

int main()
{
    struct node *root;
    root = NULL;
    root = AVLInsert(root,100);
    root=AVLInsert(root,50);
    root=AVLInsert(root,60);
    root=AVLInsert(root,30);
    root=AVLInsert(root,10);
    root=AVLInsert(root,40);
    root=AVLInsert(root,75);
    root=AVLInsert(root,120);
    cout<<"AVL Traversal :";
    Inorder(root);
    cout<<endl;
    cout<<"Height of the tree: ";
    cout<<Height(root)<<endl;
    cout<<"Balance factor is: ";
    cout<<BalanceFac(root)<<endl;
    return 0;
}

